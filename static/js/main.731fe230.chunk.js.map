{"version":3,"sources":["components/Canvas.tsx","components/Toolbar.tsx","WritingPredictV2.tsx","hooks/useCanvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","forwardRef","ref","width","rest","widthHalf","cursor","style","Toolbar","handlePredict","handleClear","className","onClick","e","preventDefault","href","WritingPredictV2","canvas","useRef","useState","isReady","setIsReady","isRegularMode","setIsRegularMode","isAutoWidth","setIsAutoWidth","isEraser","setIsEraser","currentColor","setCurrentColor","currentWidth","setCurrentWidth","autoWidth","selectedSaturation","selectedLightness","selectedColor","selectedLineWidth","lastX","lastY","hue","isDrawing","direction","isRegularPaintMode","isEraserMode","ctx","drawOnCanvas","useCallback","event","console","log","current","beginPath","moveTo","TouchEvent","lineTo","touches","clientX","clientY","offsetX","offsetY","stroke","handleDown","x","y","handleMouseDown","handleTouchDown","dynamicLineWidth","lineWidth","drawNormal","strokeStyle","globalCompositeOperation","stopDrawing","onResize","window","innerWidth","height","innerHeight","init","getContext","addEventListener","lineJoin","lineCap","clear","removeEventListener","handleRegularMode","handleSpecialMode","clearRect","handleColor","currentTarget","value","handleWidth","handleEraserMode","setAutoWidth","checked","setCurrentSaturation","setCurrentLightness","useCanvas","state","api","prediction","probability","showPrediction","setPrediction","blob","xhr","XMLHttpRequest","open","toDataURL","responseType","onload","response","formData","FormData","append","axios","post","then","get","resp","data","catch","alert","send","toolbarProps","useEffect","JSON","stringify","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.731fe230.chunk.js","sourcesContent":["import { forwardRef } from 'react'\ninterface CanvasProps extends React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement> {\n    width?: number;\n}\n\nexport const Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({ width, ...rest }, ref) => {\n    const widthHalf = width ? width / 2 : 0;\n    const cursor = `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23000000\" opacity=\"0.3\" height=\"${width}\" viewBox=\"0 0 ${width} ${width}\" width=\"${width}\"><circle cx=\"${widthHalf}\" cy=\"${widthHalf}\" r=\"${widthHalf}\" fill=\"%23000000\" /></svg>') ${widthHalf} ${widthHalf}, auto`;\n    return (\n        <canvas {...rest} style={{ ...rest.style,cursor }} ref={ref} />\n    )\n})","import React from \"react\";\n\nexport const Toolbar: React.FC<any> = ({\n    handlePredict,\n    handleClear,\n    className,\n}) => {\n    return (\n        <div className={`${className} bottom-0`}>\n            <div className=\"py-3\">\n                <a\n                    className=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 text-center rounded-full md:block\"\n                    onClick={(e) =>{\n                        e.preventDefault()\n                        handlePredict()\n                    }}\n\n                    href={\"/\"}\n                >\n                    Predict\n          </a>\n                <a href={\"/\"} className=\"bg-gray-500 hover:bg-gray-700 text-white font-bold py-2 px-4 text-center my-4 rounded-full md:block ml-4 md:ml-0\" onClick={(e) => {\n                    e.preventDefault()\n                    handleClear()\n                }}>\n                    Clear\n          </a>\n            </div>\n        </div>\n    );\n};","import { useCanvas } from \"./hooks/useCanvas\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport { Canvas } from \"./components/Canvas\";\nimport { Toolbar } from \"./components/Toolbar\";\nimport { BASE_URL } from \"./constants\";\nimport axios from \"axios\";\n\nexport const WritingPredictV2 = () => {\n  const [{ canvas, isReady, ...state }, { init, clear, ...api }] = useCanvas();\n  const [prediction,setPrediction] = useState<{prediction:string,probability:number,showPrediction:boolean}>({\n      prediction:'',\n      probability:0,\n      showPrediction:false\n  })\n  const handlePredict = useCallback(() => {\n    if (!canvas || !canvas.current) return;\n    let blob = '';\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", canvas.current.toDataURL(\"image/jpg;base64;\", 0.5));\n    xhr.responseType = \"blob\";// force the HTTP response, response-type header to be blob\n    xhr.onload = () => {\n\n      blob = xhr.response;// xhr.response is now a blob object\n      console.log(blob)\n      const formData = new FormData();\n      formData.append(\"image\", blob);\n      axios.post(BASE_URL + \"/upload\", formData).then(response => {\n        if (response) {\n          axios.get(BASE_URL + \"/predict\").then(resp =>\n            setPrediction({\n              prediction: resp.data.prediction,\n              probability: resp.data.probability,\n              showPrediction: true,\n            })\n          ).catch(() => {\n            alert(\"Failed to predict\")\n        });\n\n        }\n      }).catch(() => {\n          alert(\"Failed to upload image\")\n      });\n    }\n    xhr.send();\n\n\n  }, [canvas]);\n  const toolbarProps = { ...state, ...api, handlePredict };\n  useEffect(() => {\n    if (!isReady) {\n      init()\n    }\n  }, [isReady, init])\n  useEffect(() => {\n    return clear\n  }, [clear])\n  return (\n    <>\n       {prediction.showPrediction &&  <div className=\"absolute\">\n            {JSON.stringify(prediction)}\n        </div>}\n      <Toolbar\n        {...toolbarProps}\n        className=\"w-full p-4 absolute bg-white\"\n      />\n      <Canvas\n        width={state.currentWidth}\n        ref={canvas}\n        className={\"h-screen w-screen border\"}\n      />\n    </>\n  );\n};\n","import { useCallback, useRef, useState } from \"react\";\n\nexport interface CurrentPosition {\n    x: number;\n    y: number;\n    color: string;\n}\n\n\nexport const useCanvas = () => {\n    const canvas = useRef<HTMLCanvasElement>();\n    const [isReady, setIsReady] = useState<boolean>(false);\n    const [isRegularMode, setIsRegularMode] = useState<boolean>(true);\n    const [isAutoWidth, setIsAutoWidth] = useState<boolean>(false);\n    const [isEraser, setIsEraser] = useState<boolean>(false);\n\n    const [currentColor, setCurrentColor] = useState<string>(\"#000000\");\n    const [currentWidth, setCurrentWidth] = useState<number>(10);\n\n    const autoWidth = useRef<boolean>(false);\n    const selectedSaturation = useRef<number>(100);\n    const selectedLightness = useRef<number>(10);\n    const selectedColor = useRef<string>(\"#000000\");\n    const selectedLineWidth = useRef<number>(10);\n    const lastX = useRef<number>(0);\n    const lastY = useRef<number>(0);\n    const hue = useRef<number>(0);\n    const isDrawing = useRef<boolean>(false);\n    const direction = useRef<boolean>(true);\n    const isRegularPaintMode = useRef<boolean>(true);\n    const isEraserMode = useRef<boolean>(false);\n\n    const ctx = useRef<CanvasRenderingContext2D | null>();\n\n    const drawOnCanvas = useCallback((event: HTMLElementEventMap['mousemove'] | HTMLElementEventMap['touchmove']) => {\n        console.log(\"drawing\")\n        if (!ctx || !ctx.current) {\n            return;\n        }\n        ctx.current.beginPath();\n        ctx.current.moveTo(lastX.current, lastY.current);\n        if (event instanceof TouchEvent) {\n            ctx.current.lineTo(event.touches[0].clientX, event.touches[0].clientY);\n        } else {\n            ctx.current.lineTo(event.offsetX, event.offsetY);\n        }\n        ctx.current.stroke();\n        if (event instanceof TouchEvent) {\n            [lastX.current, lastY.current] = [event.touches[0].clientX, event.touches[0].clientY];\n        } else {\n            [lastX.current, lastY.current] = [event.offsetX, event.offsetY];\n        }\n\n    }, []);\n\n    const handleDown = useCallback((x: number, y: number) => {\n        isDrawing.current = true;\n        [lastX.current, lastY.current] = [x, y];\n    }, []);\n\n    const handleMouseDown = useCallback((e: HTMLElementEventMap['mousedown']) => {\n        isDrawing.current = true;\n        handleDown(e.offsetX, e.offsetY)\n    }, [handleDown]);\n\n    const handleTouchDown = useCallback((e: HTMLElementEventMap['touchstart']) => {\n        isDrawing.current = true;\n        handleDown(e.touches[0].clientX, e.touches[0].clientY)\n    }, [handleDown]);\n\n    const dynamicLineWidth = useCallback(() => {\n        if (!ctx || !ctx.current) {\n            return;\n        }\n        if (ctx.current.lineWidth > 90 || ctx.current.lineWidth < 10) {\n            direction.current = !direction.current;\n        }\n        direction.current ? ctx.current.lineWidth++ : ctx.current.lineWidth--;\n        setCurrentWidth(ctx.current.lineWidth);\n    }, []);\n\n    const drawNormal = useCallback(\n        (e: HTMLElementEventMap['mousemove'] | HTMLElementEventMap['touchmove']) => {\n            if (!isDrawing.current || !ctx.current) return;\n\n            if (isRegularPaintMode.current || isEraserMode.current) {\n                ctx.current.strokeStyle = selectedColor.current;\n\n                setCurrentColor(selectedColor.current);\n\n                autoWidth.current && !isEraserMode.current\n                    ? dynamicLineWidth()\n                    : (ctx.current.lineWidth = selectedLineWidth.current);\n\n                isEraserMode.current\n                    ? (ctx.current.globalCompositeOperation = \"destination-out\")\n                    : (ctx.current.globalCompositeOperation = \"source-over\");\n            } else {\n                setCurrentColor(\n                    `hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`,\n                );\n                ctx.current.strokeStyle = `hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`;\n                ctx.current.globalCompositeOperation = \"source-over\";\n\n                hue.current++;\n\n                if (hue.current >= 360) hue.current = 0;\n\n                autoWidth.current\n                    ? dynamicLineWidth()\n                    : (ctx.current.lineWidth = selectedLineWidth.current);\n            }\n            drawOnCanvas(e);\n        },\n        [drawOnCanvas, dynamicLineWidth],\n    );\n\n    const stopDrawing = useCallback(() => {\n        isDrawing.current = false;\n    }, []);\n    const onResize = useCallback(() => {\n        if (canvas && canvas.current) {\n            canvas.current.width = window.innerWidth;\n            canvas.current.height = window.innerHeight;\n        }\n    }, [])\n    const init = useCallback(() => {\n        ctx.current = canvas?.current?.getContext(\"2d\");\n        if (canvas && canvas.current && ctx && ctx.current && !isReady) {\n            console.log('create')\n            canvas.current.addEventListener(\"mousedown\", handleMouseDown, false);\n            canvas.current.addEventListener(\"mousemove\", drawNormal, false);\n            canvas.current.addEventListener(\"mouseup\", stopDrawing, false);\n            canvas.current.addEventListener(\"mouseout\", stopDrawing, false);\n\n            canvas.current.addEventListener('touchstart', handleTouchDown, false);\n            canvas.current.addEventListener('touchend', stopDrawing, false);\n            canvas.current.addEventListener('touchcancel', stopDrawing, false);\n            canvas.current.addEventListener('touchmove', drawNormal, false);\n            window.addEventListener('resize', onResize, false);\n            onResize()\n\n            ctx.current.strokeStyle = \"#000\";\n            ctx.current.lineJoin = \"round\";\n            ctx.current.lineCap = \"round\";\n            ctx.current.lineWidth = 10;\n            setIsReady(true);\n        }\n    }, [drawNormal, handleMouseDown, stopDrawing, handleTouchDown, isReady, onResize]);\n    const clear = useCallback(() => {\n        console.log(\"clear\")\n        canvas.current?.removeEventListener(\"mousedown\", handleMouseDown, false);\n        canvas.current?.removeEventListener(\"mousemove\", drawNormal, false);\n        canvas.current?.removeEventListener(\"mouseup\", stopDrawing, false);\n        canvas.current?.removeEventListener(\"mouseout\", stopDrawing, false);\n\n        canvas.current?.removeEventListener('touchstart', handleTouchDown, false);\n        canvas.current?.removeEventListener('touchend', stopDrawing, false);\n        canvas.current?.removeEventListener('touchcancel', stopDrawing, false);\n        canvas.current?.removeEventListener('touchmove', drawNormal, false);\n        window.removeEventListener('resize', onResize, false);\n        setIsReady(false)\n    }, [drawNormal, handleMouseDown, stopDrawing, handleTouchDown, onResize])\n\n    const handleRegularMode = useCallback(() => {\n        setIsRegularMode(true);\n        isEraserMode.current = false;\n        setIsEraser(false);\n        isRegularPaintMode.current = true;\n    }, []);\n\n    const handleSpecialMode = useCallback(() => {\n        setIsRegularMode(false);\n        isEraserMode.current = false;\n        setIsEraser(false);\n        isRegularPaintMode.current = false;\n    }, []);\n\n    const handleColor = (e: any) => {\n        setCurrentColor(e.currentTarget.value);\n        selectedColor.current = e.currentTarget.value;\n    };\n\n    const handleWidth = (e: any) => {\n        setCurrentWidth(e.currentTarget.value);\n        selectedLineWidth.current = e.currentTarget.value;\n    };\n\n    const handleClear = useCallback(() => {\n        if (!ctx || !ctx.current || !canvas || !canvas.current) {\n            return;\n        }\n        ctx.current.clearRect(0, 0, canvas.current.width, canvas.current.height);\n    }, []);\n\n    const handleEraserMode = (e: any) => {\n        autoWidth.current = false;\n        setIsAutoWidth(false);\n        setIsRegularMode(true);\n        isEraserMode.current = true;\n        setIsEraser(true);\n    };\n\n    const setCurrentSaturation = (e: any) => {\n        setCurrentColor(\n            `hsl(${hue.current},${e.currentTarget.value}%,${selectedLightness.current}%)`,\n        );\n        selectedSaturation.current = e.currentTarget.value;\n    };\n\n    const setCurrentLightness = (e: any) => {\n        setCurrentColor(\n            `hsl(${hue.current},${selectedSaturation.current}%,${e.currentTarget.value}%)`,\n        );\n        selectedLightness.current = e.currentTarget.value;\n    };\n\n    const setAutoWidth = (e: any) => {\n        autoWidth.current = e.currentTarget.checked;\n        setIsAutoWidth(e.currentTarget.checked);\n\n        if (!e.currentTarget.checked) {\n            setCurrentWidth(selectedLineWidth.current);\n        } else {\n            setCurrentWidth(ctx?.current?.lineWidth ?? selectedLineWidth.current);\n        }\n    };\n\n    return [\n        {\n            canvas,\n            isReady,\n            currentWidth,\n            currentColor,\n            isRegularMode,\n            isAutoWidth,\n            isEraser,\n        },\n        {\n            init,\n            clear,\n            handleRegularMode,\n            handleSpecialMode,\n            handleColor,\n            handleWidth,\n            handleClear,\n            handleEraserMode,\n            setAutoWidth,\n            setCurrentSaturation,\n            setCurrentLightness,\n        },\n    ] as any;\n};","import { WritingPredictV2 } from \"./WritingPredictV2\";\n\n\n\nfunction App() {\n \n\n  return (\n      <WritingPredictV2 />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}