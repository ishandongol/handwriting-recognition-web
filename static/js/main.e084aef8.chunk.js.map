{"version":3,"sources":["components/Canvas.tsx","components/Toolbar.tsx","constants.ts","components/Prediction.tsx","WritingPredictV2.tsx","hooks/useCanvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Canvas","forwardRef","ref","brushWidth","rest","brushHeight","widthHalf","cursor","style","Toolbar","handlePredict","handleClear","className","width","href","onClick","e","preventDefault","BASE_URL","process","Prediction","props","prediction","parseFloat","probability","toPrecision","initialState","showPrediction","WritingPredictV2","canvas","useRef","useState","isReady","setIsReady","isRegularMode","setIsRegularMode","isAutoWidth","setIsAutoWidth","isEraser","setIsEraser","currentColor","setCurrentColor","currentWidth","setCurrentWidth","autoWidth","selectedSaturation","selectedLightness","selectedColor","selectedLineWidth","lastX","lastY","hue","isDrawing","direction","isRegularPaintMode","isEraserMode","ctx","drawOnCanvas","useCallback","event","console","log","current","beginPath","moveTo","TouchEvent","lineTo","touches","clientX","clientY","offsetX","offsetY","stroke","handleDown","x","y","handleMouseDown","handleTouchDown","dynamicLineWidth","lineWidth","drawNormal","strokeStyle","globalCompositeOperation","stopDrawing","onResize","height","init","getContext","addEventListener","window","lineJoin","lineCap","fillStyle","fillRect","clear","removeEventListener","handleRegularMode","handleSpecialMode","clearRect","handleColor","currentTarget","value","handleWidth","handleEraserMode","setAutoWidth","checked","setCurrentSaturation","setCurrentLightness","useCanvas","state","api","setPrediction","blob","xhr","XMLHttpRequest","open","toDataURL","responseType","onload","response","formData","FormData","append","axios","post","then","get","resp","data","catch","toast","warn","send","toolbarProps","useEffect","currentHeight","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","hideProgressBar","document","getElementById"],"mappings":"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","file":"static/js/main.e084aef8.chunk.js","sourcesContent":["import { forwardRef } from 'react'\ninterface CanvasProps extends React.DetailedHTMLProps<React.CanvasHTMLAttributes<HTMLCanvasElement>, HTMLCanvasElement> {\n    brushWidth?: number;\n    brushHeight?:number\n}\n\nexport const Canvas = forwardRef<HTMLCanvasElement, CanvasProps>(({ brushWidth,brushHeight, ...rest }, ref) => {\n    const widthHalf = brushWidth ? brushWidth / 2 : 0;\n    const cursor = `url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" fill=\"%23ffffff\" opacity=\"1\" height=\"${brushWidth}\" viewBox=\"0 0 ${brushWidth} ${brushWidth}\" width=\"${brushWidth}\"><circle cx=\"${widthHalf}\" cy=\"${widthHalf}\" r=\"${widthHalf}\" fill=\"%23ffffff\" /></svg>') ${widthHalf} ${widthHalf}, auto`;\n    return (\n        <canvas {...rest} style={{ ...rest.style,cursor }} ref={ref} />\n    )\n})","import React from \"react\";\n\nexport const Toolbar: React.FC<any> = ({\n    handlePredict,\n    handleClear,\n    className,\n}) => {\n    return (\n        <div className={`${className}`} style={{width:'500px'}}>\n            <div className=\"py-3 flex\">\n            <a href={\"/\"} className=\"bg-gray-300 hover:bg-gray-400 text-black font-bold py-2 px-4 text-center my-4 rounded-full md:block mr-4 md:ml-0 flex-grow\" onClick={(e) => {\n                    e.preventDefault()\n                    handleClear()\n                }}>\n                    Clear\n          </a>\n                <a\n                    className=\"bg-purple-700 hover:bg-purple-900 text-white font-bold py-2 px-4 text-center my-4  ml-4 rounded-full md:block flex-grow\"\n                    onClick={(e) =>{\n                        e.preventDefault()\n                        handlePredict()\n                    }}\n\n                    href={\"/\"}\n                >\n                    Predict\n          </a>\n                \n            </div>\n        </div>\n    );\n};","export const BASE_URL = process.env.REACT_APP_BASE_URL\n","export interface PredictionProps {\n  prediction: string;\n  probability: string;\n}\nexport const Prediction = (props: PredictionProps) => {\n  return (\n    <div className=\"bg-white p-5 rounded-md m-3\">\n        <div className=\"text-2xl text-gray-600\">Prediction</div>\n      <div className=\"text-3xl md:text-6xl my-4\">{props.prediction}</div>{\" \"}\n      <div className=\"text-2xl text-gray-600\">{parseFloat(props.probability)?.toPrecision(2)} %</div>\n    </div>\n  );\n};\n","import { useCanvas } from \"./hooks/useCanvas\";\nimport { useCallback, useState, useEffect } from \"react\";\nimport { Canvas } from \"./components/Canvas\";\nimport { Toolbar } from \"./components/Toolbar\";\nimport { BASE_URL } from \"./constants\";\nimport axios from \"axios\";\nimport {  toast } from 'react-toastify';\nimport { Prediction, PredictionProps } from \"./components/Prediction\";\n\nconst initialState = {\n  prediction:'',\n  probability:'0',\n  showPrediction:false\n}\ninterface PredictionState extends PredictionProps{\n  showPrediction:boolean\n}\nexport const WritingPredictV2 = () => {\n  const [{ canvas, isReady, ...state }, { init, clear,handleClear, ...api }] = useCanvas();\n  const [prediction,setPrediction] = useState<PredictionState>(initialState)\n  const clearPrediction = () => {\n    handleClear()\n    setPrediction(initialState)\n  }\n  const handlePredict = useCallback(() => {\n    if (!canvas || !canvas.current) return;\n    let blob = '';\n    const xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", canvas.current.toDataURL(\"image/jpg;base64;\", 0.5));\n    xhr.responseType = \"blob\";// force the HTTP response, response-type header to be blob\n    xhr.onload = () => {\n\n      blob = xhr.response;// xhr.response is now a blob object\n      console.log(blob)\n      const formData = new FormData();\n      formData.append(\"image\", blob);\n      axios.post(BASE_URL + \"/upload\", formData).then(response => {\n        if (response) {\n          axios.get(BASE_URL + \"/predict\").then(resp =>\n            setPrediction({\n              prediction: resp.data.prediction,\n              probability: resp.data.probability,\n              showPrediction: true,\n            })\n          ).catch(() => {\n            toast.warn(\"Failed to predict\")\n        });\n\n        }\n      }).catch(() => {\n          toast.warn(\"Failed to upload image\")\n      });\n    }\n    xhr.send();\n\n\n  }, [canvas]);\n  const toolbarProps = { ...state, ...api, handlePredict, handleClear: clearPrediction };\n  useEffect(() => {\n    if (!isReady) {\n      init()\n    }\n  }, [isReady, init])\n  useEffect(() => {\n    return clear\n  }, [clear])\n  return (\n    <div className=\"relative mx-auto w-3/6 flex flex-col\">\n     <div className=\"self-center\">\n       <p className=\"my-4 text-3xl\">Nepali Handwriting Recognition</p>\n     {prediction.showPrediction &&  <div className=\"absolute\">\n         <Prediction prediction={prediction.prediction} probability={prediction.probability}/>\n        </div>}\n     <Canvas\n        brushWidth={state.currentWidth}\n        brushHeight={state.currentHeight}\n        ref={canvas}\n        className={\"bg-black border\"}\n      />\n     </div>\n      <Toolbar\n        {...toolbarProps}\n        className=\"p-4 self-center\"\n      />\n    </div>\n  );\n};\n","import { useCallback, useRef, useState } from \"react\";\n\nexport interface CurrentPosition {\n    x: number;\n    y: number;\n    color: string;\n}\n\n\nexport const useCanvas = () => {\n    const canvas = useRef<HTMLCanvasElement>();\n    const [isReady, setIsReady] = useState<boolean>(false);\n    const [isRegularMode, setIsRegularMode] = useState<boolean>(true);\n    const [isAutoWidth, setIsAutoWidth] = useState<boolean>(false);\n    const [isEraser, setIsEraser] = useState<boolean>(false);\n\n    const [currentColor, setCurrentColor] = useState<string>(\"#ffffff\");\n    const [currentWidth, setCurrentWidth] = useState<number>(15);\n\n    const autoWidth = useRef<boolean>(false);\n    const selectedSaturation = useRef<number>(100);\n    const selectedLightness = useRef<number>(10);\n    const selectedColor = useRef<string>(\"#ffffff\");\n    const selectedLineWidth = useRef<number>(15);\n    const lastX = useRef<number>(0);\n    const lastY = useRef<number>(0);\n    const hue = useRef<number>(0);\n    const isDrawing = useRef<boolean>(false);\n    const direction = useRef<boolean>(true);\n    const isRegularPaintMode = useRef<boolean>(true);\n    const isEraserMode = useRef<boolean>(false);\n\n    const ctx = useRef<CanvasRenderingContext2D | null>();\n\n    const drawOnCanvas = useCallback((event: HTMLElementEventMap['mousemove'] | HTMLElementEventMap['touchmove']) => {\n        console.log(\"drawing\")\n        if (!ctx || !ctx.current) {\n            return;\n        }\n        ctx.current.beginPath();\n        ctx.current.moveTo(lastX.current, lastY.current);\n        if (event instanceof TouchEvent) {\n            ctx.current.lineTo(event.touches[0].clientX, event.touches[0].clientY);\n        } else {\n            ctx.current.lineTo(event.offsetX, event.offsetY);\n        }\n        ctx.current.stroke();\n        if (event instanceof TouchEvent) {\n            [lastX.current, lastY.current] = [event.touches[0].clientX, event.touches[0].clientY];\n        } else {\n            [lastX.current, lastY.current] = [event.offsetX, event.offsetY];\n        }\n\n    }, []);\n\n    const handleDown = useCallback((x: number, y: number) => {\n        isDrawing.current = true;\n        [lastX.current, lastY.current] = [x, y];\n    }, []);\n\n    const handleMouseDown = useCallback((e: HTMLElementEventMap['mousedown']) => {\n        isDrawing.current = true;\n        handleDown(e.offsetX, e.offsetY)\n    }, [handleDown]);\n\n    const handleTouchDown = useCallback((e: HTMLElementEventMap['touchstart']) => {\n        isDrawing.current = true;\n        handleDown(e.touches[0].clientX, e.touches[0].clientY)\n    }, [handleDown]);\n\n    const dynamicLineWidth = useCallback(() => {\n        if (!ctx || !ctx.current) {\n            return;\n        }\n        if (ctx.current.lineWidth > 90 || ctx.current.lineWidth < 10) {\n            direction.current = !direction.current;\n        }\n        direction.current ? ctx.current.lineWidth++ : ctx.current.lineWidth--;\n        setCurrentWidth(ctx.current.lineWidth);\n    }, []);\n\n    const drawNormal = useCallback(\n        (e: HTMLElementEventMap['mousemove'] | HTMLElementEventMap['touchmove']) => {\n            if (!isDrawing.current || !ctx.current) return;\n\n            if (isRegularPaintMode.current || isEraserMode.current) {\n                ctx.current.strokeStyle = selectedColor.current;\n\n                setCurrentColor(selectedColor.current);\n\n                autoWidth.current && !isEraserMode.current\n                    ? dynamicLineWidth()\n                    : (ctx.current.lineWidth = selectedLineWidth.current);\n\n                isEraserMode.current\n                    ? (ctx.current.globalCompositeOperation = \"destination-out\")\n                    : (ctx.current.globalCompositeOperation = \"source-over\");\n            } else {\n                setCurrentColor(\n                    `hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`,\n                );\n                ctx.current.strokeStyle = `hsl(${hue.current},${selectedSaturation.current}%,${selectedLightness.current}%)`;\n                ctx.current.globalCompositeOperation = \"source-over\";\n\n                hue.current++;\n\n                if (hue.current >= 360) hue.current = 0;\n\n                autoWidth.current\n                    ? dynamicLineWidth()\n                    : (ctx.current.lineWidth = selectedLineWidth.current);\n            }\n            drawOnCanvas(e);\n        },\n        [drawOnCanvas, dynamicLineWidth],\n    );\n\n    const stopDrawing = useCallback(() => {\n        isDrawing.current = false;\n    }, []);\n    const onResize = useCallback(() => {\n        if (canvas && canvas.current) {\n            // canvas.current.width = window.innerWidth;\n            // canvas.current.height = window.innerHeight;\n            canvas.current.width = 500;\n            canvas.current.height = 500;\n        }\n    }, [])\n    const init = useCallback(() => {\n        ctx.current = canvas?.current?.getContext(\"2d\");\n        if (canvas && canvas.current && ctx && ctx.current && !isReady) {\n            console.log('create')\n            canvas.current.addEventListener(\"mousedown\", handleMouseDown, false);\n            canvas.current.addEventListener(\"mousemove\", drawNormal, false);\n            canvas.current.addEventListener(\"mouseup\", stopDrawing, false);\n            canvas.current.addEventListener(\"mouseout\", stopDrawing, false);\n\n            canvas.current.addEventListener('touchstart', handleTouchDown, false);\n            canvas.current.addEventListener('touchend', stopDrawing, false);\n            canvas.current.addEventListener('touchcancel', stopDrawing, false);\n            canvas.current.addEventListener('touchmove', drawNormal, false);\n            window.addEventListener('resize', onResize, false);\n            onResize()\n\n            ctx.current.strokeStyle = \"#000\";\n            ctx.current.lineJoin = \"round\";\n            ctx.current.lineCap = \"round\";\n            ctx.current.lineWidth = 10;\n            ctx.current.fillStyle =\"black\";\n            ctx.current.fillRect(0,0,canvas.current.width,canvas.current.height)\n            setIsReady(true);\n        }\n    }, [drawNormal, handleMouseDown, stopDrawing, handleTouchDown, isReady, onResize]);\n    const clear = useCallback(() => {\n        console.log(\"clear\")\n        canvas.current?.removeEventListener(\"mousedown\", handleMouseDown, false);\n        canvas.current?.removeEventListener(\"mousemove\", drawNormal, false);\n        canvas.current?.removeEventListener(\"mouseup\", stopDrawing, false);\n        canvas.current?.removeEventListener(\"mouseout\", stopDrawing, false);\n\n        canvas.current?.removeEventListener('touchstart', handleTouchDown, false);\n        canvas.current?.removeEventListener('touchend', stopDrawing, false);\n        canvas.current?.removeEventListener('touchcancel', stopDrawing, false);\n        canvas.current?.removeEventListener('touchmove', drawNormal, false);\n        window.removeEventListener('resize', onResize, false);\n        setIsReady(false)\n    }, [drawNormal, handleMouseDown, stopDrawing, handleTouchDown, onResize])\n\n    const handleRegularMode = useCallback(() => {\n        setIsRegularMode(true);\n        isEraserMode.current = false;\n        setIsEraser(false);\n        isRegularPaintMode.current = true;\n    }, []);\n\n    const handleSpecialMode = useCallback(() => {\n        setIsRegularMode(false);\n        isEraserMode.current = false;\n        setIsEraser(false);\n        isRegularPaintMode.current = false;\n    }, []);\n\n    const handleColor = (e: any) => {\n        setCurrentColor(e.currentTarget.value);\n        selectedColor.current = e.currentTarget.value;\n    };\n\n    const handleWidth = (e: any) => {\n        setCurrentWidth(e.currentTarget.value);\n        selectedLineWidth.current = e.currentTarget.value;\n    };\n\n    const handleClear = useCallback(() => {\n        if (!ctx || !ctx.current || !canvas || !canvas.current) {\n            return;\n        }\n        ctx.current.clearRect(0, 0, canvas.current.width, canvas.current.height);\n    }, []);\n\n    const handleEraserMode = (e: any) => {\n        autoWidth.current = false;\n        setIsAutoWidth(false);\n        setIsRegularMode(true);\n        isEraserMode.current = true;\n        setIsEraser(true);\n    };\n\n    const setCurrentSaturation = (e: any) => {\n        setCurrentColor(\n            `hsl(${hue.current},${e.currentTarget.value}%,${selectedLightness.current}%)`,\n        );\n        selectedSaturation.current = e.currentTarget.value;\n    };\n\n    const setCurrentLightness = (e: any) => {\n        setCurrentColor(\n            `hsl(${hue.current},${selectedSaturation.current}%,${e.currentTarget.value}%)`,\n        );\n        selectedLightness.current = e.currentTarget.value;\n    };\n\n    const setAutoWidth = (e: any) => {\n        autoWidth.current = e.currentTarget.checked;\n        setIsAutoWidth(e.currentTarget.checked);\n\n        if (!e.currentTarget.checked) {\n            setCurrentWidth(selectedLineWidth.current);\n        } else {\n            setCurrentWidth(ctx?.current?.lineWidth ?? selectedLineWidth.current);\n        }\n    };\n\n    return [\n        {\n            canvas,\n            isReady,\n            currentWidth,\n            currentColor,\n            isRegularMode,\n            isAutoWidth,\n            isEraser,\n        },\n        {\n            init,\n            clear,\n            handleRegularMode,\n            handleSpecialMode,\n            handleColor,\n            handleWidth,\n            handleClear,\n            handleEraserMode,\n            setAutoWidth,\n            setCurrentSaturation,\n            setCurrentLightness,\n        },\n    ] as any;\n};","import { WritingPredictV2 } from \"./WritingPredictV2\";\n\n\n\nfunction App() {\n \n\n  return (\n      <WritingPredictV2 />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/index.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport App from './App';\nimport { ToastContainer } from 'react-toastify';\n\nimport reportWebVitals from './reportWebVitals';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    <ToastContainer\n    hideProgressBar\n    />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}